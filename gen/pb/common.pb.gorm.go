package pb

import (
	"context"
	"time"

	ptypesImport "github.com/golang/protobuf/ptypes"
	stdTimeImport "time"
)

type PostORM struct {
	ID        string              `gorm:"type:uuid;primaryKey"`
	CreatedAt *stdTimeImport.Time `gorm:"default:CURRENT_TIMESTAMP;not null"`
	UpdatedAt *stdTimeImport.Time `gorm:"default:CURRENT_TIMESTAMP;not null"`
	Header    string              `gorm:"not null;uniqueIndex:idx_post_header"`
	Body      string              `gorm:"type:text;not null"`
	Tags      []*TagORM           `gorm:"foreignKey:PostID;references:ID"`
}

// TableName overrides the default tablename generated by GORM
func (PostORM) TableName() string {
	return "posts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Post) ToORM(ctx context.Context) (PostORM, error) {
	to := PostORM{}
	var err error
	if prehook, ok := interface{}(m).(PostWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ID = m.ID
	if m.GetCreatedAt() != nil {
		var t time.Time
		if t, err = ptypesImport.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.GetUpdatedAt() != nil {
		var t time.Time
		if t, err = ptypesImport.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	to.Header = m.Header
	to.Body = m.Body
	for _, v := range m.Tags {
		if v != nil {
			if tempTags, cErr := v.ToORM(ctx); cErr == nil {
				to.Tags = append(to.Tags, &tempTags)
			} else {
				return to, cErr
			}
		} else {
			to.Tags = append(to.Tags, nil)
		}
	}
	if posthook, ok := interface{}(m).(PostWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *PostORM) ToPB(ctx context.Context) (Post, error) {
	to := Post{}
	var err error
	if prehook, ok := interface{}(m).(PostWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ID = m.ID
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypesImport.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypesImport.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	to.Header = m.Header
	to.Body = m.Body
	for _, v := range m.Tags {
		if v != nil {
			if tempTags, cErr := v.ToPB(ctx); cErr == nil {
				to.Tags = append(to.Tags, &tempTags)
			} else {
				return to, cErr
			}
		} else {
			to.Tags = append(to.Tags, nil)
		}
	}
	if posthook, ok := interface{}(m).(PostWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Post the arg will be the target, the caller the one being converted from

// PostWithBeforeToORM called before default ToORM code
type PostWithBeforeToORM interface {
	BeforeToORM(context.Context, *PostORM) error
}

// PostWithAfterToORM called after default ToORM code
type PostWithAfterToORM interface {
	AfterToORM(context.Context, *PostORM) error
}

// PostWithBeforeToPB called before default ToPB code
type PostWithBeforeToPB interface {
	BeforeToPB(context.Context, *Post) error
}

// PostWithAfterToPB called after default ToPB code
type PostWithAfterToPB interface {
	AfterToPB(context.Context, *Post) error
}

type TagORM struct {
	ID        string              `gorm:"type:uuid;primaryKey;uniqueIndex:idx_tag_name"`
	CreatedAt *stdTimeImport.Time `gorm:"default:CURRENT_TIMESTAMP;not null"`
	UpdatedAt *stdTimeImport.Time `gorm:"default:CURRENT_TIMESTAMP;not null"`
	Name      string              `gorm:"not null;uniqueIndex:idx_tag_name"`
	PostID    string              `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (TagORM) TableName() string {
	return "tags"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Tag) ToORM(ctx context.Context) (TagORM, error) {
	to := TagORM{}
	var err error
	if prehook, ok := interface{}(m).(TagWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ID = m.ID
	if m.GetCreatedAt() != nil {
		var t time.Time
		if t, err = ptypesImport.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.GetUpdatedAt() != nil {
		var t time.Time
		if t, err = ptypesImport.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	to.Name = m.Name
	if posthook, ok := interface{}(m).(TagWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TagORM) ToPB(ctx context.Context) (Tag, error) {
	to := Tag{}
	var err error
	if prehook, ok := interface{}(m).(TagWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ID = m.ID
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypesImport.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypesImport.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	to.Name = m.Name
	if posthook, ok := interface{}(m).(TagWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Tag the arg will be the target, the caller the one being converted from

// TagWithBeforeToORM called before default ToORM code
type TagWithBeforeToORM interface {
	BeforeToORM(context.Context, *TagORM) error
}

// TagWithAfterToORM called after default ToORM code
type TagWithAfterToORM interface {
	AfterToORM(context.Context, *TagORM) error
}

// TagWithBeforeToPB called before default ToPB code
type TagWithBeforeToPB interface {
	BeforeToPB(context.Context, *Tag) error
}

// TagWithAfterToPB called after default ToPB code
type TagWithAfterToPB interface {
	AfterToPB(context.Context, *Tag) error
}
